@page "/ManageRoles"
@using Clinic.Services
@inject UserService userService;
@inject NavigationManager NavigationManager

<PageTitle>Manage Roles</PageTitle>

<AuthorizeView Roles = "Administrator">
    <Authorized>
            <div class="card-header" style="margin-bottom: 40px" >
                <h2 class="text-center" style="margin-top:8px"><b>Add or remove roles for users</b></h2>
            </div>
            @if (usersWithRoles != null)
            {
                    @if(usersWithRoles.Any())
                    {
                        <TableTemplate Items="usersWithRoles">
                        <TableHeader>
                                <th>First Name</th>
                                <th>Last Name</th>
                                <th>Email</th>
                                <th>Role</th>
                                <th></th>
                        </TableHeader>
                        <RowTemplate Context="user">
                                <td>@user.Item2</td>
                                <td>@user.Item3</td>
                                <td>@user.Item1.Email</td>
                                <td>@user.Item4</td>
                                <td role="button" @onclick="() => NavigateToEditUserRoles(user.Item1.Id)"><span style="color:red">Edit</span></td>
                        </RowTemplate>
                    </TableTemplate>
                    }
                    else
                    {
                        <h5 class="card-title">Loading...</h5>
                    }
            }
            else
            {
                <h5 class="card-title">No users in database</h5>
            }
    </Authorized>
    <NotAuthorized>
        <h1>Access denied!</h1>
    </NotAuthorized>
</AuthorizeView>

@code{
    private List<Tuple<ApplicationUser, string?, string?, string>> usersWithRoles = new(); // AppUser, FirstName, LastName, Roles

    protected override async Task OnInitializedAsync()
    {
        var appUsers = await userService.GetAllUsersAsync();

        foreach (var appUser in appUsers)
        {
            if (appUser.Email.Equals("admin@admin.com"))
                continue;

            var names = userService.GetFirstAndLastNameForSpecificUser(appUser.Id);
            usersWithRoles.Add(Tuple.Create
                (appUser, names.Item1, names.Item2, userService.GetRolesForUserInOneStringSplittedByAComa(appUser.Id)));
        }
    }

    private void NavigateToEditUserRoles(string userId)
    {
        NavigationManager.NavigateTo($"EditUserRoles/{userId}");
    }
}