@page "/CreateUser"
@using Clinic.Services
@using Microsoft.AspNetCore.Identity
@inject UserService userService;
@inject NavigationManager NavigationManager

<PageTitle>Create user</PageTitle>

<AuthorizeView Roles="Administrator">
    <Authorized>
        <form method="post">
            <div class="card">
                <div class="card-header">
                    <h2>Create new user <b></b></h2>
                </div>
            </div>
            <div class="card-body">
                <EditForm Model="User" Context="FirstNameLastName">
                    <div class="form-group">
                        <label for="first-name">First name</label>
                        <InputText class="form-control" id="first-name" @bind-Value="firstName" />
                    </div>
                    <div class="form-group">
                        <label for="second-name">Last name</label>
                        <InputText class="form-control" id="last-name" @bind-Value="lastName" />
                    </div>
                    <EditForm Model="User" Context="Email">
                        <div class="form-group">
                            <label for="email">Email and user name</label>
                            <input type="text" value="@email" @oninput="@OnEmailInput" class="form-control" id="new-email" />
                        </div>
                    </EditForm>
                </EditForm>
                <EditForm Model="User" Context="Password">
                    <div class="form-group">
                        <label for="psswd">Password</label>
                        <input type="text" value="@password" @oninput="@OnPasswordInput" class="form-control" id="psswd" />
                    </div>
                </EditForm>
                <h3>Select roles for new user <b></b></h3>
                @if (RolesWithSelection.Any())
                {
                    foreach (var role in RolesWithSelection)
                    {
                        <div class="form-check-label m-1">
                            <EditForm Context="checkbox" Model="User">
                                <InputCheckbox @bind-Value="role.IsSelected" @onclick="() => UpdateSelected(role)" class="form-check-input" />
                                <label class="form-check-label">
                                    @role.Role
                                </label>
                            </EditForm>
                        </div>
                    }
                }
                <button href="/ManageUsers" @onclick="async () => CreateNewUser()" type="submit" class="btn btn-lg btn-danger">Add new user to database</button>
            </div>
        </form>
    </Authorized>
    <NotAuthorized>
        <h1>Access denied!</h1>
    </NotAuthorized>
</AuthorizeView>
@code {
    private ApplicationUser User { get; set; } = new();
    private List<IdentityRole> AllRoles { get; set; }
    private List<AllRolesView> RolesWithSelection { get; set; }
    private string email { get; set; }
    private string password { get; set; } = "";
    private string firstName { get; set; } = "";
    private string lastName { get; set; } = "";

    private class AllRolesView
    {
        public IdentityRole Role { get; set; }
        public bool IsSelected { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        AllRoles = userService.GetAllRoles();
        RolesWithSelection = new List<AllRolesView>();
        foreach (var role in AllRoles)
        {
            if (role.Name == "Administrator")
                continue;
            RolesWithSelection.Add(new AllRolesView
                {
                    Role = role,
                    IsSelected = false
                });
        }
    }

    public void OnEmailInput(ChangeEventArgs args)
    {
        email = args.Value.ToString();
    }

    public void OnPasswordInput(ChangeEventArgs args)
    {
        password = args.Value.ToString();
    }

    private void UpdateSelected(AllRolesView role)
    {
        var isSelected = role.IsSelected;
        if (isSelected)
            role.IsSelected = false;
        else if (!isSelected)
            role.IsSelected = true;
    }

    private async Task CreateNewUser()
    {
        var id = Guid.NewGuid();
        var doctor = new Doctor
            {
                Id = id.ToString(),
                FirstName = firstName,
                LastName = lastName,
                PermissionNumber = 1,
                User = new ApplicationUser
                {
                    Id = id.ToString(),
                    Email = email,
                    UserName = email,
                    EmailConfirmed = true,
                    SecurityStamp = Guid.NewGuid().ToString()
                }
            };
        var psswd = new PasswordHasher<ApplicationUser>();
        var hashed = psswd.HashPassword(doctor.User, password);
        doctor.User.PasswordHash = hashed;

        await userService.CreateNewDoctorUser(doctor);
    }
}
