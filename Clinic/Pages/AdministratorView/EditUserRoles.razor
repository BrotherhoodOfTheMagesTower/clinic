@page "/EditUserRoles/{Id}"
@using Microsoft.AspNetCore.Identity
@using Clinic.Services
@inject UserService userService;
@inject NavigationManager NavigationManager
@inject RoleManager<IdentityRole> roleManager
@inject UserManager<ApplicationUser> userManager

<PageTitle>Edit Roles</PageTitle>

<AuthorizeView Roles = "Administrator">
    <Authorized>
        <form method="post">
            <div class="card">
                <div class="card-header">
                    <h2 class="text-center" style="margin-top:8px">Edit roles for user <b>@User.UserName</b></h2>  
                </div>
            </div>
            <div class="card-body">
            @if (RolesWithSelection != null)
            {
                    @if(RolesWithSelection.Any())
                    {
                        foreach (var role in RolesWithSelection)
                        {
                            <div class="form-check-label m-1">
                                <EditForm Context="checkbox" Model="User">
                                    <InputCheckbox @bind-Value="role.IsSelected" @onclick="() => UpdateSelected(role)" class="form-check-input"/>
                                    <label class="form-check-label">
                                        @role.Role
                                    </label>
                                </EditForm>
                            </div>
                        }
                    }
                    else
                    {
                        <h5 class="card-title">No users in database</h5>
                    }
            }
            else
            {
                <h5 class="card-title">No users in database</h5>
            }
            </div>
            <div class="card-footer">
                <a @onclick="async () => UpdateRoles(RolesWithSelection)" class="btn btn-primary" style="width:auto">Update</a>
                <a @onclick="() => NavigateToManageRoles()" class="btn btn-primary" style="width:auto">Cancel</a>
            </div>
           
        </form>
    </Authorized>
    <NotAuthorized>
        <h1>Access denied!</h1>
    </NotAuthorized>
</AuthorizeView>

@code{
    [Parameter]
    public string Id { get; set; }
    private ApplicationUser User { get; set; }
    private List<IdentityRole> AllRoles { get; set; }
    private List<AllRolesView> RolesWithSelection { get; set; }
    private List<string> UserRoles { get; set; }

    private class AllRolesView
    {
        public IdentityRole Role { get; set; }
        public bool IsSelected { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {   
        AllRoles = userService.GetAllRoles();
        User = userService.GetUserById(Id);
        UserRoles = GetRolesForUser(User.Id).ToList();
        RolesWithSelection = new List<AllRolesView>();
        foreach(var role in AllRoles)
        {
            if (role.Name == "Administrator")
                continue;

            if(UserRoles.Contains(role.Name))
            {
                RolesWithSelection.Add(new AllRolesView 
                    { 
                        Role = role,
                        IsSelected = true
                    });
            }
            else
            {
                RolesWithSelection.Add(new AllRolesView 
                    { 
                        Role = role,
                        IsSelected = false
                    });
            }
        }
    }

    private async Task<bool> IsUserInRole(string role)
    {
        return await userManager.IsInRoleAsync(User, role);
    }

    private List<string> GetRolesForUser(string userId)
        => userService.GetRolesForUser(userId);

    private void NavigateToEditUserRoles(string userId)
    {
        NavigationManager.NavigateTo($"EditUserRoles/{userId}");
    }
    
    private void NavigateToManageRoles()
    {
        NavigationManager.NavigateTo("ManageRoles");
    }

    private bool CheckIfContains(IdentityRole role)
    {
        return UserRoles.Contains(role.Name);
    }

    private void UpdateSelected(AllRolesView role)
    {
        var isSelected = role.IsSelected;
        if (isSelected)
            role.IsSelected = false;
        else if(!isSelected)
            role.IsSelected = true;
    }

    private async Task UpdateRoles(List<AllRolesView> roles)
    {
        var selected = roles.Where(x => x.IsSelected == true);

        foreach(var role in roles)
        {
            if (role.IsSelected && !UserRoles.Contains(role.Role.Name))
                await userManager.AddToRoleAsync(User, role.Role.Name);
            else if(!role.IsSelected && UserRoles.Contains(role.Role.Name))
                await userManager.RemoveFromRoleAsync(User, role.Role.Name);
        }

        NavigateToEditUserRoles(User.Id);
    }
}