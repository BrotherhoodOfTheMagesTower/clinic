@page "/EditUser/{Id}"
@using Microsoft.AspNetCore.Identity
@using Clinic.Services
@using Microsoft.AspNetCore.WebUtilities
@using System.Text
@using System.ComponentModel.DataAnnotations
@inject UserService userService;
@inject NavigationManager NavigationManager
@inject RoleManager<IdentityRole> roleManager
@inject UserManager<ApplicationUser> userManager
@inject IToastService toastService


<PageTitle>Edit user</PageTitle>

<AuthorizeView Roles="Administrator" Context="EditUserDetails">
    <Authorized>
        <section>

            <form method="post">
                <div class="card">
                    <div class="card-header">
                        <h2 class="text-center" style="margin-top:8px">Edit user <b>@User.UserName</b></h2>
                    </div>
                </div>
                <div class="card-body">
                    @if (User != null)
                    {
                        // E-Mail & UserName change
                        <EditForm EditContext="emailContext">
                            <DataAnnotationsValidator />
                            <div class="form-group mx-sm-3 mb-2">
                                <label for="email">Email and user name</label>
                                <div class="col-sm-6 col-md-4">
                                    <input class="form-control" id="email" disabled value="@initialEmail" />
                                </div>
                            </div>
                            <div class="form-group mx-sm-3 mb-2">
                                <label style="margin-top:15px" for="new-email">New Email and user name</label>
                                <div class="col-sm-6 col-md-4">
                                    <InputText class="form-control" id="new-email" @bind-Value="User.Email" />
                                    <ValidationMessage For="() => User.Email" />
                                </div>
                            </div>
                            <div style="margin-left: 10px " class="col-sm-6 col-md-4 text-center">
                                @if (emailContext is not null)
                                {
                                    <button style="margin-top:5px" disabled="@(!emailContext.Validate() || !emailContext.IsModified())" id="change-email-button" type="submit" @onclick="async () => await ChangeEmailAndUserName()" class="w-40 btn btn-primary">Change email and user name</button>
                                }
                            </div>
                        </EditForm>

                        // First & Last Name
                        <EditForm EditContext="namesContext">
                            <DataAnnotationsValidator />
                            <div class="form-group mx-sm-3 mb-2">
                                <div class="form-group">
                                    <label for="first-name">First name</label>
                                    <div class="col-sm-6 col-md-4">
                                        <InputText class="form-control" id="first-name" @bind-Value="Doctor.FirstName" />
                                        <ValidationMessage For="() => Doctor.FirstName" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="second-name">Last name</label>
                                    <div class="col-sm-6 col-md-4">
                                        <InputText class="form-control" id="last-name" @bind-Value="Doctor.LastName" />
                                        <ValidationMessage For="() => Doctor.LastName" />
                                    </div>
                                </div>
                            </div>
                            <div style="margin-left: 10px " class="col-sm-6 col-md-4 text-center">
                                @if (namesContext is not null)
                                {
                                    <button style="margin-top:5px" disabled="@(!namesContext.Validate() || !namesContext.IsModified())" id="change-names-button" type="submit" @onclick="async () => await ChangeFirstAndLastName()" class="w-40 btn btn-primary">Change first and last name</button>
                                }
                            </div>
                        </EditForm>

                        // Password
                        <EditForm EditContext="passContext">
                            <DataAnnotationsValidator />
                            <div class="form-group mx-sm-3 mb-2">
                                <label style="margin-top:25px" for="psswd">Password</label>
                                <div class="col-sm-6 col-md-4">
                                    <InputText placeholder="New Password" class="form-control" id="psswd" @bind-Value="pass.Password" />
                                    <ValidationMessage For="() => pass.Password" />
                                </div>
                            </div>
                            <div style="margin-left: 10px " class="col-sm-6 col-md-4 text-center">
                                @if (passContext is not null)
                                {
                                    <button style="margin-top:5px" disabled="@(!passContext.Validate() || !passContext.IsModified())" id="change-psswd" type="submit" @onclick="async () => await ChangePassword()" class="btn btn-danger">Change password</button>
                                }
                            </div>
                        </EditForm>
                    }
                    else
                    {
                        <h5 class="card-title">No users in database</h5>
                    }
                </div>

            </form>
        </section>

    </Authorized>
    <NotAuthorized>
        <section>
            <h1>Access denied!</h1>
        </section>
    </NotAuthorized>

</AuthorizeView>

@code {
    [Parameter]
    public string Id { get; set; } = String.Empty;
    private ApplicationUser User { get; set; } = new();
    private Doctor Doctor { get; set; } = new();
    private string initialEmail = String.Empty;

    EditContext? emailContext;
    EditContext? passContext;
    EditContext? namesContext;
    Pass pass = new();

    private class Pass
    {
        [Required(ErrorMessage = "The password is required.")]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[#$^+=!*()@%&]).{6,}$", ErrorMessage = "Password must have at least one non alphanumeric character, at least one digit ('0'-'9') and at least one uppercase ('A'-'Z').")]
        [Display(Name = "Password")]
        public string Password { get; set; } = String.Empty;
    }

    protected override void OnInitialized()
    {
        var tempUser = userService.GetUserById(Id);
        if (tempUser is not null)
        {
            User = tempUser;
        }

        emailContext = new EditContext(User);
        passContext = new EditContext(pass);
        var names = userService.GetFirstAndLastNameForSpecificUser(Id);

        if (names.Item1 is not null)
        {
            Doctor.FirstName = names.Item1;
        }
        if (names.Item2 is not null)
        {
            Doctor.LastName = names.Item2;
        }

        namesContext = new EditContext(Doctor);
        initialEmail = User.Email;
    }

    private async Task<bool> IsUserInRole(string role)
    {
        return await userManager.IsInRoleAsync(User, role);
    }

    private List<string> GetRolesForUser(string userId)
        => userService.GetRolesForUser(userId);

    private void NavigateToEditUser(string userId)
    {
        NavigationManager.NavigateTo($"EditUser/{userId}");
    }

    private void NavigateToManageUsers()
    {
        NavigationManager.NavigateTo("ManageUsers");
    }

    private async Task ChangeFirstAndLastName()
    {
        var result = await userService.SetFirstAndLastNameForSpecificUserAsync(User.Id, Doctor.FirstName!, Doctor.LastName!);
        if (result)
            toastService.ShowSuccess($"The first & last name were successfully changed to {Doctor.FirstName} {Doctor.LastName!}", "Well done!");
        else
            toastService.ShowError($"Sorry, something went wrong! The first & last name have not been changed.", "Oops!");
    }

    private async Task ChangeEmailAndUserName()
    {
        if (!User.Email.Equals("") && User.Email != null)
        {
            await userManager.SetEmailAsync(User, User.Email);

            var newUser = userService.GetUserById(User.Id);
            var emailConfirmationToken = await userManager.GenerateEmailConfirmationTokenAsync(newUser);
            await userManager.ConfirmEmailAsync(User, emailConfirmationToken);
            var result = await userManager.SetUserNameAsync(newUser, User.Email);
            if (result.Succeeded)
            {
                initialEmail = User.Email;
                toastService.ShowSuccess($"The email & user name was successfully changed from {initialEmail} to {User.Email}", "Well done!");
            }
            else
                toastService.ShowError($"Sorry, something went wrong! The email & user name have not been changed.", "Oops!");
        }
    }

    private async Task ChangePassword()
    {
        var token = await userManager.GeneratePasswordResetTokenAsync(User);
        var result = await userManager.ResetPasswordAsync(User, token, pass.Password);

        if (result.Succeeded)
            toastService.ShowSuccess($"The password was successfully changed to {pass.Password}", "Well done!");
        else
            toastService.ShowError($"Sorry, something went wrong! The password has not been changed.", "Oops!");
    }
}