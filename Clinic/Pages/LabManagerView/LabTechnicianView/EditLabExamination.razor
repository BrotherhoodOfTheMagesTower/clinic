@page "/EditLabExamination/{EditExaminationId}"
@using Clinic.Data.Enums
@using Clinic.Data.Models
@using Clinic.Data
@using Clinic.Services
@using System.Security.Claims


@inject NavigationManager NavigationManager;
@inject LaboratoryExaminationService laboratoryExaminationService;
@inject IToastService toastService;
@inject LabTechnicianService labTechnicianService;
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor


<PageTitle>Edit laboratory examinations</PageTitle>

<AuthorizeView Roles="Lab Technician, Lab Manager" Context="examinationEditing">
    <Authorized>
        @if (!validId)
        {
            <NotFound />
        }
        else
        {
            <section>
                @if (examination != null)
                {
                    <h3 class="mb-3 fw-bold"><b>Edit laboratory examinations</b></h3> <br />
                    <EditForm EditContext="newExamination" OnValidSubmit="changeExistingExamination" class="w-50 bg-gray px-4 py-3 rounded">

                        <h3 class="mb-3 fw-bold">Enter the examination's data:</h3>

                        <label class="d-block mb-1 ml-1">Id </label>
                        <InputText @bind-Value="EditExaminationId" readonly="readonly" class="form-control w-75" />

                        <label class="d-block mb-1 ml-1">Code </label>
                        <InputText @bind-Value="code" readonly="readonly" class="form-control w-75" />

                        <label class="d-block mb-1 ml-1">Name </label>
                        <InputText @bind-Value="@examination.GlossaryDictionary.Name" class="form-control w-75" readonly="readonly" />

                        <label class="d-block mb-1 ml-1"> Status</label>
                        <InputRadioGroup @bind-Value="@examination.Status" >
                            @foreach (var g in (ExaminationStatus[])Enum.GetValues(typeof(ExaminationStatus)))
                            {
                                if (g == examination.Status)
                                {
                            <div><InputRadio Value="g" checked disabled=@statusReadonly />@g.ToString().ToLower() </div>
                                }
                                else if (g != ExaminationStatus.APPROVED)
                                {
                            <div><InputRadio Value="g" disabled=@statusReadonly />@g.ToString().ToLower()</div>
                                }
                            }
                </InputRadioGroup>

                <label class="d-block mb-1 ml-1">Result</label>
                <InputText @bind-Value="@examination.Result" class="form-control w-75" readonly=@statusReadonly />

                <AuthorizeView Roles="Lab Manager" Context="noteAdding">
                    <Authorized>
                        <label class="d-block mb-1 ml-1">Manager's note </label>
                        <InputTextArea @bind-Value="@examination.ManagerNotes" class="form-control w-75" />
                    </Authorized>
                </AuthorizeView>

                <br />
                <div>
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
            </EditForm>
                }
                <button type="submit" class="btn btn-primary" @onclick="() => NavigateToLabExaminations()">Back</button>
            </section>
        }
    </Authorized>
    <NotAuthorized>
        <section>
            <h1>Access denied!</h1>
        </section>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public string EditExaminationId { get; set; } = String.Empty;

    //Kod badania
    public string? code;
    private LaboratoryExamination? examination;
    private EditContext? newExamination;
    private bool validId = true;
    private Guid parsedId;

    public bool statusReadonly = true;

    protected override async Task OnInitializedAsync()
    {
        validId = Guid.TryParse(EditExaminationId, out parsedId);
        if (validId)
        {
            examination = await laboratoryExaminationService.GetByIdAsync(parsedId);
            if (examination != null)
            {
                newExamination = new EditContext(examination);
                code = examination.GlossaryDictionary.Code.ToString().ToLower();
                if (examination.Status.Equals(ExaminationStatus.COMMISIONED))
                    statusReadonly = false;
            }
        }
         toastService.ShowSuccess(statusReadonly.ToString());
    }

    private void changeExistingExamination()
    {
        if (examination != null)
        {
            string currentUserId = httpContextAccessor.HttpContext.User.FindFirst(ClaimTypes.NameIdentifier).Value;
            examination.LabTechnician = labTechnicianService.GetById(currentUserId);

            // TODO Distinguish statuses and set date only when changed to executed or canceled
            examination.ExecutedOrCancelledAt = DateTime.Now;
            laboratoryExaminationService.Update(examination);
            toastService.ShowSuccess("Examination has been successfully saved!");
        }
        else
        {
            toastService.ShowError("Failed to update examination!");
        }
    }


    private void NavigateToLabExaminations()
    {
        NavigationManager.NavigateTo($"LabExaminations");
    }

 }