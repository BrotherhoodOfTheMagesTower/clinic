@page "/ApproveExamination"
@using Clinic.Data.Enums
@using Clinic.Data.Models
@using Clinic.Data
@using Clinic.Services

@inject NavigationManager NavigationManager;
@inject LaboratoryExaminationService laboratoryExaminationService;
@inject IToastService toastService;


<PageTitle>Approve examinations</PageTitle>

<AuthorizeView Roles="Lab Manager">
    <Authorized>
        <h3 class="mb-3 fw-bold"><b>Examinations for approval</b></h3> <br />

        @if (examinationsList != null)
        {
            <TableTemplate Items="examinationsList">
                <TableHeader>
                    <th> Examination's Id </th>
                    <th> Code </th>
                    <th> Name </th>
                    <th> Status </th>
                    <th> Result </th>
                    <th> Actions </th>
                </TableHeader>
                <RowTemplate Context="examination">
                    <td> @examination.Id </td>
                    <td> @examination.GlossaryDictionary.Code.ToString().ToLower() </td>
                    <td> @examination.GlossaryDictionary.Name </td>
                    <td> @examination.Status.ToString().ToLower() </td>
                    <td> @examination.Result </td>
                    <th>
                        @*TODO Add Cancel option*@
                        <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => approveExamination(examination.Id.ToString()))">Approve | </a>
                        <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => NavigateToEditExamination(examination.Id.ToString()))">Add note</a>
                    </th>
                </RowTemplate>
            </TableTemplate>
        }
        else
        {
            <h3 class="mb-3 fw-bold">There are no examinations to be approved</h3> <br />
        }
        <br /><br />
    </Authorized>
    <NotAuthorized>
        <h1>Access denied!</h1>
    </NotAuthorized>
</AuthorizeView>

@code {

    private List<LaboratoryExamination>? examinationsList;

    protected override async Task OnInitializedAsync()
    {
        examinationsList = await laboratoryExaminationService.GetAllLabExaminationsAsync();
    }

    public async Task approveExamination(string Id)
    {
        LaboratoryExamination? examination = await laboratoryExaminationService.GetByIdAsync(Guid.Parse(Id));
        if (examination != null)
        {
            examination.Status = ExaminationStatus.APPROVED;
            laboratoryExaminationService.Update(examination);
            toastService.ShowSuccess("Examination has been successfully approved!");
        }
        else
        {
            toastService.ShowError("Failed to update examination!");
        }
    }

    public void NavigateToEditExamination(string Id)
    {
        NavigationManager.NavigateTo($"EditLabExamination/{Id}");
    }

 }