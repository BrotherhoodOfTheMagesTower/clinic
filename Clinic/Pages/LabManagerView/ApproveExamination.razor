@page "/ApproveExamination"
@using Clinic.Data.Enums
@using Clinic.Data.Models
@using Clinic.Data
@using Clinic.Services
@using System.Security.Claims

@inject NavigationManager NavigationManager;
@inject LaboratoryExaminationService laboratoryExaminationService;
@inject LabManagerService labManagerService;
@inject IToastService toastService;
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor



<PageTitle>Approve examinations</PageTitle>

<AuthorizeView Roles="Lab Manager">
    <Authorized>
        @if (!validId)
        {
            <NotFound />
        }
        else
        {
            <section>
                <h3 class="mb-3 fw-bold"><b>Examinations for approval</b></h3> <br />

                @if (examinationsList != null)
                {
                    <TableTemplate Items="examinationsList">
                        <TableHeader>
                            <th> Examination's Id </th>
                            <th> Code </th>
                            <th> Name </th>
                            <th> Status </th>
                            <th> Result </th>
                            <th> Actions </th>
                        </TableHeader>
                        <RowTemplate Context="examination">
                            <td> @examination.Id </td>
                            <td> @examination.GlossaryDictionary.Code.ToString().ToLower() </td>
                            <td> @examination.GlossaryDictionary.Name </td>
                            <td> @examination.Status.ToString().ToLower() </td>
                            <td> @examination.Result </td>
                            <th>
                                <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => approveExamination(examination.Id.ToString()))">Approve | </a>
                                <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => NavigateToCancelExamination(examination.Id.ToString()))">Cancel</a>
                            </th>
                        </RowTemplate>
                    </TableTemplate>
                }
                else
                {
                    <h3 class="mb-3 fw-bold">There are no examinations to be approved</h3> <br />
                }
                <br />

                <br />
            </section>
        }
    </Authorized>
    <NotAuthorized>
        <section>
            <h1>Access denied!</h1>
        </section>
    </NotAuthorized>
</AuthorizeView>

@code {

    private List<LaboratoryExamination>? examinationsList;
    private bool validId = true;
    private Guid parsedId;

    protected override async Task OnInitializedAsync()
    {
        examinationsList = await laboratoryExaminationService.GetAllLabExaminationsForApprovmentAsync();
    }

    public async Task approveExamination(string Id)
    {
        validId = Guid.TryParse(Id, out parsedId);
        if (!validId) return;

        LaboratoryExamination? examination = await laboratoryExaminationService.GetByIdAsync(parsedId);
        if (examination != null)
        {
            examination.Status = ExaminationStatus.APPROVED;
            examination.ApprovedOrCancelledAt = DateTime.Now;
            string? currentUserId = httpContextAccessor?.HttpContext?.User?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (currentUserId is not null)
            {
                examination.LabManager = labManagerService.GetById(currentUserId);
            }
            laboratoryExaminationService.Update(examination);
            examinationsList = await laboratoryExaminationService.GetAllLabExaminationsForApprovmentAsync();
            toastService.ShowSuccess("Examination has been successfully approved!");
        }
        else
        {
            toastService.ShowError("Failed to update examination!");
        }
    }

    public void NavigateToCancelExamination(string Id)
    {
        NavigationManager.NavigateTo($"CancelLabExamination/{Id}");
    }

 }