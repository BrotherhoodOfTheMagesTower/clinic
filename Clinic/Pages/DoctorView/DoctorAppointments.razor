@page "/DoctorAppointments"
@using Clinic.Data.Enums
@using Clinic.Data.Models
@using Clinic.Data
@using Clinic.Services

@inject NavigationManager NavigationManager;
@inject DoctorService doctorService;
@inject AppointmentService appointmentService;
@inject PatientService patientService;
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor

<PageTitle>Appointments</PageTitle>

<AuthorizeView Roles="Doctor">
    <Authorized>
        <section>
            @*<h3 class="mb-3 fw-bold"><b>Patients @searchPatient</b></h3> <br />
                <div>
                <input type="text" @bind="searchPatient" class="form-control w-75"/>
                <button type="submit" class="btn btn-primary" @onclick="SearchPatient">Search</button>
                <button type="submit" class="btn btn-primary"  @onclick="(() => NavigateToAddPatient())">Add patient</button>
                </div><br />*@

            <h1 class="mb-3 fw-bold">Appointments</h1><br />

            <label><b>Filter appointments by status:</b></label><br />
            <input type="checkbox" @bind="bookedVisible">
            <label for="addition">Booked</label><br />
            <input type="checkbox" @bind="finishedVisible">
            <label for="addition">Finished</label><br />
            <input type="checkbox" @bind="cancelledVisible">
            <label for="addition">Cancelled</label><br /><br />

            <label class="d-block mb-1 ml-1">Filter appointments by date</label>
			<select @onchange="DisplayFilterList" class="form-control w-75">
				@foreach (var element in filterList)
				{
					@if (element.Equals("All"))
					{
						<option value="@element" selected>@element</option>
					}
					else
					{
						<option value="@element">@element</option>
					}
				}
			</select><br/><br/>


            @if (bookedAppointmentsList != null && bookedVisible == true)
            {
                <h2 class="mb-3 fw-bold">Booked appointments</h2>

                <br />
                @if (bookedAppointmentsList.Count > 0)
                {
                    <TableTemplate Items="bookedAppointmentsList">
                        <TableHeader>
                            <th> Last Name </th>
                            <th> First Name </th>
                            <th> Status </th>
                            <th> Registrar </th>
                            <th> Date </th>
                            <th> Action </th>
                        </TableHeader>
                        <RowTemplate Context="appointment">
                            <td> @appointment.Patient.LastName </td>
                            <td> @appointment.Patient.FirstName </td>
                            <td> @appointment.Status.ToString().ToLower() </td>
                            <td> @appointment.Registrar.FirstName @appointment.Registrar.LastName </td>
                            <td> @appointment.RegisteredTo </td>
                            <th>
                                <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => NavigateToEditAppointment(appointment.Id.ToString()))">Edit</a>
                            </th>
                        </RowTemplate>
                    </TableTemplate>
                }
                else
                {
                    <h3 class="mb-3 fw-bold">There are no booked appointments in database</h3> <br />
                }
            }

            <br /><br />


            @if (finishedAppointmentsList != null && finishedVisible == true)
            {
                <h2 class="mb-3 fw-bold">Finished appointments</h2>

                <br />
                @if (finishedAppointmentsList.Count > 0)
                {
                    <TableTemplate Items="finishedAppointmentsList">
                        <TableHeader>
                            <th> Last Name </th>
                            <th> First Name </th>
                            <th> Status </th>
                            <th> Registrar </th>
                            <th> Date </th>
                            <th> Action </th>
                        </TableHeader>
                        <RowTemplate Context="appointment">
                            <td> @appointment.Patient.LastName </td>
                            <td> @appointment.Patient.FirstName </td>
                            <td> @appointment.Status.ToString().ToLower() </td>
                            <td> @appointment.Registrar.FirstName @appointment.Registrar.LastName </td>
                            <td> @appointment.RegisteredTo </td>
                            <th>
                                <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => NavigateToShowAppointmentDetails(appointment.Id.ToString()))">Show details</a>
                            </th>
                        </RowTemplate>
                    </TableTemplate>
                }
                else
                {
                    <h3 class="mb-3 fw-bold">There are no finished appointments in database</h3> <br />
                }
            }
            <br /><br />

            @if (cancelledAppointmentsList != null && cancelledVisible == true)
            {
                <h2 class="mb-3 fw-bold">Cancelled appointments</h2>

                <br />
                @if (cancelledAppointmentsList.Count > 0)
                {
                    <TableTemplate Items="cancelledAppointmentsList">
                        <TableHeader>
                            <th> Last Name </th>
                            <th> First Name </th>
                            <th> Status </th>
                            <th> Registrar </th>
                            <th> Date </th>
                            <th> Action </th>
                        </TableHeader>
                        <RowTemplate Context="appointment">
                            <td> @appointment.Patient.LastName </td>
                            <td> @appointment.Patient.FirstName </td>
                            <td> @appointment.Status.ToString().ToLower() </td>
                            <td> @appointment.Registrar.FirstName @appointment.Registrar.LastName </td>
                            <td> @appointment.RegisteredTo </td>
                            <th>
                                <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => NavigateToShowAppointmentDetails(appointment.Id.ToString()))">Show details</a>
                            </th>
                        </RowTemplate>
                    </TableTemplate>
                }
                else
                {
                    <h3 class="mb-3 fw-bold">There are no cancelled appointments in database</h3> <br />
                }
            }

        </section>
    </Authorized>
    <NotAuthorized>
        <section>
            <h1>Access denied!</h1>
        </section>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<Appointment>? finishedAppointmentsList;
    private List<Appointment>? bookedAppointmentsList;
    private List<Appointment>? cancelledAppointmentsList;
    private bool bookedVisible = true;
    private bool cancelledVisible = false;
    private bool finishedVisible = false;
    Doctor? loggedDoc;

    public List<string> filterList = new List<string>
	{
		"All",
		"Today",
		"This week",
		"This month"
	};

    protected override async Task OnInitializedAsync()
    {
        loggedDoc = doctorService.GetDoctorByEmail(httpContextAccessor?.HttpContext?.User?.Identity?.Name);
        if (loggedDoc != null)
        {
            finishedAppointmentsList = (await appointmentService.GetDoctorAppointmentsByStatusAsync(loggedDoc, AppointmentStatus.FINISHED)).OrderBy(x => x.RegisteredTo).ToList();
            bookedAppointmentsList = (await appointmentService.GetDoctorAppointmentsByStatusAsync(loggedDoc, AppointmentStatus.BOOKED)).OrderBy(x => x.RegisteredTo).ToList();
            cancelledAppointmentsList = (await appointmentService.GetDoctorAppointmentsByStatusAsync(loggedDoc, AppointmentStatus.CANCELLED)).OrderBy(x => x.RegisteredTo).ToList();
        }
    }

    public void NavigateToEditAppointment(string Id)
    {
        NavigationManager.NavigateTo($"EditAppointment/{Id}");
    }

    public void NavigateToShowAppointmentDetails(string Id)
    {
        NavigationManager.NavigateTo($"ShowAppointmentDetails/{Id}");
    }

    private async Task DisplayFilterList(ChangeEventArgs e)
    {
        string? filter = e?.Value?.ToString();
        if (filter is not null && loggedDoc is not null)
        {
            if (filter.Equals("Today"))
            {
                finishedAppointmentsList = appointmentService.GetTodayDoctorAppointmentsWithStatus(loggedDoc, AppointmentStatus.FINISHED);
                bookedAppointmentsList = appointmentService.GetTodayDoctorAppointmentsWithStatus(loggedDoc, AppointmentStatus.BOOKED);
                cancelledAppointmentsList = appointmentService.GetTodayDoctorAppointmentsWithStatus(loggedDoc, AppointmentStatus.CANCELLED);
            }
            if (filter.Equals("All"))
            {
                finishedAppointmentsList = await appointmentService.GetDoctorAppointmentsByStatusAsync(loggedDoc, AppointmentStatus.FINISHED);
                bookedAppointmentsList = await appointmentService.GetDoctorAppointmentsByStatusAsync(loggedDoc, AppointmentStatus.BOOKED);
                cancelledAppointmentsList = await appointmentService.GetDoctorAppointmentsByStatusAsync(loggedDoc, AppointmentStatus.CANCELLED);
            }
            if (filter.Equals("This week"))
            {
                finishedAppointmentsList = appointmentService.GetThisWeekDoctorAppointmentsWithStatus(loggedDoc, AppointmentStatus.FINISHED);
                bookedAppointmentsList = appointmentService.GetThisWeekDoctorAppointmentsWithStatus(loggedDoc, AppointmentStatus.BOOKED);
                cancelledAppointmentsList = appointmentService.GetThisWeekDoctorAppointmentsWithStatus(loggedDoc, AppointmentStatus.CANCELLED);
            }
            if (filter.Equals("This month"))
            {
                finishedAppointmentsList = appointmentService.GetThisMonthDoctorAppointmentsWithStatus(loggedDoc, AppointmentStatus.FINISHED);
                bookedAppointmentsList = appointmentService.GetThisMonthDoctorAppointmentsWithStatus(loggedDoc, AppointmentStatus.BOOKED);
                cancelledAppointmentsList = appointmentService.GetThisMonthDoctorAppointmentsWithStatus(loggedDoc, AppointmentStatus.CANCELLED);
            }
        }
        finishedAppointmentsList = finishedAppointmentsList?.OrderBy(x => x.RegisteredTo).ToList();
        bookedAppointmentsList = bookedAppointmentsList?.OrderBy(x => x.RegisteredTo).ToList();
        cancelledAppointmentsList = cancelledAppointmentsList?.OrderBy(x => x.RegisteredTo).ToList();
	}

    }

