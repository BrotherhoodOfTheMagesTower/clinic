@page "/EditPhysicalExamination/{ExaminationId}"
@using Clinic.Data.Enums
@using Clinic.Data.Models
@using Clinic.Data
@using Clinic.Services

@inject NavigationManager NavigationManager;
@inject IToastService toastService;
@inject PhysicalExaminationService physicalExaminationService;

<PageTitle>Edit physical examinations</PageTitle>

<AuthorizeView Roles="Doctor" Context="examinationEditing">
    <Authorized>
        @if (!validId)
        {
               <NotFound/>
        }

        else
        {

            @if (examination != null)
            {
                <EditForm EditContext="newExamination" OnValidSubmit="changeExistingExamination" class="w-50 bg-gray px-4 py-3 rounded">

                    <h1 class="mb-3 fw-bold">Edit physical examinations</h1><br />
                    <h3 class="mb-3 fw-bold">Examination:</h3>

                    <label class="d-block mb-1 ml-1">id </label>
                    <label class="form-control w-75">@ExaminationId </label><br />

                    <label class="d-block mb-1 ml-1">Name: </label>
                    <label class="form-control w-75"> @examination.GlossaryDictionary.Name </label><br />

                    <label class="d-block mb-1 ml-1">Result: </label>
                    <InputText @bind-Value=@examination.Result class="form-control w-75"></InputText><br />
                    <div>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </EditForm>
            }
        }
    </Authorized>
    <NotAuthorized>
        <h1>Access denied!</h1>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public string ExaminationId { get; set; } = String.Empty;

    private PhysicalExamination? examination;
    private EditContext? newExamination;
    private bool validId = true;
    private Guid parsedId;

    protected override async Task OnInitializedAsync()
    {
        validId = Guid.TryParse(ExaminationId, out parsedId);
        if (validId == false)
        {
            return;
        }
        examination = await physicalExaminationService.GetByIdAsync(parsedId);

        if (examination != null)
        {
            newExamination = new EditContext(examination);
        }

    }

    private void changeExistingExamination()
    {
        if (examination != null)
        {
            physicalExaminationService.Update(examination);
            toastService.ShowSuccess("Physical examination was successfully updated!");
        }
    }

 }