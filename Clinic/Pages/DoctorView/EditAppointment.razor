@page "/EditAppointment/{Id}"
@using Clinic.Data
@using Clinic.Data.Enums
@using Clinic.Data.Models
@using System.Globalization
@using System.ComponentModel.DataAnnotations
@using System.Diagnostics
@using Clinic.Services

@inject NavigationManager NavigationManager;
@inject IToastService toastService;
@inject AppointmentService appointmentService;
@inject LaboratoryExaminationService laboratoryExaminationService;
@inject PhysicalExaminationService physicalExaminationService;

<PageTitle>Edit appointment</PageTitle>

<AuthorizeView Roles="Doctor" Context="appointmentEditing">
    <Authorized>

        @if (!validId)
        {
            <NotFound />
        }

        else
        {
            <section>
                @if (appointmentToEdit != null && appointment != null && appointment.Patient != null)
                {
                    <EditForm EditContext="appointmentToEdit" OnValidSubmit="ChangeExistingAppointment" class="w-50 bg-gray px-4 py-3 rounded">

                        <h1 class="mb-3 fw-bold">Edit appointment</h1><br />
                        <h2 class="mb-3 fw-bold">Patient's informations:</h2>
                        <label class="d-block mb-1 ml-1">Name and surname:</label>
                        <label class="form-control w-75">@appointment.Patient.FirstName @appointment.Patient.LastName</label>
                        <label class="d-block mb-1 ml-1">Date of birth:</label>
                        @if (appointment.Patient.BirthDate != null)
                        {
                            <label class="form-control w-75">@appointment.Patient.BirthDate.Value.Day/@appointment.Patient.BirthDate.Value.Month/@appointment.Patient.BirthDate.Value.Year</label>

                            <br />
                        }
                        else
                        {
                            <label class="form-control w-75">not provided</label>

                            <br />
                        }
                        <button type="button" class="btn btn-primary" @onclick="(() => NavigateToPatientExaminationHistory(appointment.Patient.Id.ToString()))">Show examinations and appointments history</button> <br /><br />

                        <h3 class="mb-3 fw-bold">Appointment:</h3>
                        <label class="d-block mb-1 ml-1">Id:</label>
                        <label class="form-control w-75">@appointment.Id</label>

                        <label class="d-block mb-1 ml-1">Date:</label>
                        <label class="form-control w-75">@appointment.RegisteredTo.Day/@appointment.RegisteredTo.Month/@appointment.RegisteredTo.Year</label><br />

                        <label class="d-block mb-1 ml-1"> Status:</label>
                        <InputRadioGroup @bind-Value="@appointment.Status">
                            @foreach (var s in (AppointmentStatus[])Enum.GetValues(typeof(AppointmentStatus)))
                            {
                                if (s != AppointmentStatus.BOOKED)
                                {
                            <div><InputRadio checked Value="s" />@s.ToString().ToLower()</div>

                                }

                            }
                </InputRadioGroup>

                @if (@appointment.Status != AppointmentStatus.CANCELLED)
                        {
                            <label class="d-block mb-1 ml-1">Diagnosis: </label>
                            <InputText @bind-Value="appointment.Diagnosis" class="form-control w-75" />
                        }


                        <label class="d-block mb-1 ml-1">Description:</label>
                        <InputTextArea @bind-Value="appointment.Description" class="form-control w-75" />


                        <br>

                        @if (@appointment.Status != AppointmentStatus.BOOKED)
                        {
                            <button type="submit" class="btn btn-primary">Save</button>

                            <br />

                            <br />
                        }

                        <br />


                    </EditForm>
                }

                <h3 class="mb-3 fw-bold">Laboratory examinations:</h3>
                @if (laboratoryExaminationsList != null && laboratoryExaminationsList.Count() > 0)
                {
                    <TableTemplate Items="laboratoryExaminationsList">
                        <TableHeader>
                            <th> Examination's id </th>
                            <th> Code </th>
                            <th> Name </th>
                            <th> Order Date </th>
                            <th> Status </th>
                            <th> Doctor's note </th>
                            <th> Action </th>
                        </TableHeader>
                        <RowTemplate Context="examination">
                            <td> @examination.Id </td>
                            <td> @examination.GlossaryDictionary.Code.ToString().ToLower() </td>
                            <td> @examination.GlossaryDictionary.Name </td>
                            <td> @examination.OrderedAt </td>
                            <td> @examination.Status.ToString().ToLower() </td>
                            <td> @examination.DoctorsNotes </td>
                            <th>
                                <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => NavigateToShowLaboratoryExaminationDetails(examination.Id.ToString()))">Show details</a>
                            </th>
                        </RowTemplate>
                    </TableTemplate>
                }
                else
                {
                    <h3 class="mb-3 fw-bold">There are no laboratory examinations in the base</h3> <br />
                }

                @if (appointment != null)
                {
                    <button type="button" class="btn btn-primary" @onclick="(() => NavigateToOrderLaboratoryExamination(appointment.Id.ToString()))">Order laboratory examination</button> <br />

                    <br />
                }

                <h3 class="mb-3 fw-bold">Physical examinations:</h3>
                @if (physicalExaminationsList != null && physicalExaminationsList.Count() > 0)
                {
                    <TableTemplate Items="physicalExaminationsList">
                        <TableHeader>
                            <th> Examination's id </th>
                            <th> Code </th>
                            <th> Name </th>
                            <th> Result </th>
                            <th> Action </th>
                        </TableHeader>
                        <RowTemplate Context="examination">
                            <td> @examination.Id </td>
                            <td> @examination.GlossaryDictionary.Code.ToString().ToLower() </td>
                            <td> @examination.GlossaryDictionary.Name </td>
                            <td> @examination.Result </td>
                            <th>
                                <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => NavigateToShowPhysicalExaminationDetails(examination.Id.ToString()))">Show details</a>
                            </th>
                        </RowTemplate>
                    </TableTemplate>
                }
                else
                {
                    <h3 class="mb-3 fw-bold">There are no physical examinations in the base</h3> <br />
                }

                @if (appointment != null)
                {
                    <button type="button" class="btn btn-primary" @onclick="(() => NavigateToAddPhysicalExamination(appointment.Id.ToString()))">Add physical examination</button> <br />

                    <br />
                }
            </section>
        }
    </Authorized>
    <NotAuthorized>
        <section>
            <h1>Access denied!</h1>
        </section>
    </NotAuthorized>
</AuthorizeView>

@code {
    //Appointment Id
    [Parameter]
    public string Id { get; set; } = String.Empty;

    private Appointment? appointment;
    private EditContext? appointmentToEdit;

    private List<LaboratoryExamination>? laboratoryExaminationsList;
    private List<PhysicalExamination>? physicalExaminationsList;

    private bool validId = true;
    private Guid parsedId;

    protected override async Task OnInitializedAsync()
    {
        validId = Guid.TryParse(Id, out parsedId);
        if (validId == false)
        {
            return;
        }
        appointment = await appointmentService.GetByIdAsync(parsedId);
        if (appointment is not null)
        {
            appointmentToEdit = new EditContext(appointment);
        }

        if (appointment != null)
        {
            laboratoryExaminationsList = (await laboratoryExaminationService.GetLaboratoryExaminationsAsync(appointment)).ToList();
            physicalExaminationsList = (await physicalExaminationService.GetPhysicalExaminationsAsync(appointment)).ToList();
        }
    }

    private void ChangeExistingAppointment()
    {
        if (appointment != null)
        {
            if (appointment.Status == AppointmentStatus.CANCELLED)
                appointment.Diagnosis = "no diagnosis due to cancellation of the appointment";
            if (appointment.Description == "" || appointment.Description == null)
                appointment.Description = "no description";
            else
            {
                appointmentService.Update(appointment);
                toastService.ShowSuccess("Appointment updated successfully!");
                NavigationManager.NavigateTo($"DoctorAppointments");
            }
        }
        else
        {
            toastService.ShowError("Error while updating!");
        }
    }

    public void NavigateToPatientExaminationHistory(string PatientId)
    {
        NavigationManager.NavigateTo($"ExaminationsAndAppointmentsHistory/{PatientId}");
    }

    public void NavigateToOrderLaboratoryExamination(string AppointmentId)
    {
        NavigationManager.NavigateTo($"OrderLaboratoryExamination/{AppointmentId}");
    }

    public void NavigateToAddPhysicalExamination(string AppointmentId)
    {
        NavigationManager.NavigateTo($"AddPhysicalExamination/{AppointmentId}");
    }

    public void NavigateToShowLaboratoryExaminationDetails(string LaboratoryExaminationId)
    {
        NavigationManager.NavigateTo($"ShowLaboratoryExaminationDetails/{LaboratoryExaminationId}");
    }

    public void NavigateToShowPhysicalExaminationDetails(string PhysicalExaminationId)
    {
        NavigationManager.NavigateTo($"ShowPhysicalExaminationDetails/{PhysicalExaminationId}");
    }

}
