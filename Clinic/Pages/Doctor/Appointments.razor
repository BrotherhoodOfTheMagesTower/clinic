@page "/Appointments"
@using Clinic.Data.Enums
@using Clinic.Data.Models
@using Clinic.Data

@inject NavigationManager NavigationManager;

<PageTitle>Patients</PageTitle>

<AuthorizeView Roles="Doctor">
    <Authorized>
        @*<h3 class="mb-3 fw-bold"><b>Patients @searchPatient</b></h3> <br />
            <div>
            <input type="text" @bind="searchPatient" class="form-control w-75"/>
            <button type="submit" class="btn btn-primary" @onclick="SearchPatient">Search</button>
            <button type="submit" class="btn btn-primary"  @onclick="(() => NavigateToAddPatient())">Add patient</button>
            </div><br />*@

        <h1 class="mb-3 fw-bold">Appointments</h1><br />
        @if (AppointmentsList != null)
        {
            <TableTemplate Items="AppointmentsList">
                <TableHeader>
                    <th> Id </th>
                    <th> Last Name </th>
                    <th> First Name </th>
                    <th> Status </th>
                    <th> Date </th>
                    <th> Action </th>
                </TableHeader>
                <RowTemplate Context="appointment">
                    <td> @appointment.Id </td>
                    <td> @appointment.Patient.LastName </td>
                    <td> @appointment.Patient.FirstName </td>
                    <td> @appointment.Status.ToString().ToLower() </td>
                    <td> @appointment.RegisteredTo </td>
                    <th>
                        <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => NavigateToEditAppointment(appointment.Id.ToString()))">Edit</a>
                    </th>
                </RowTemplate>
            </TableTemplate>
        }
        else
        {
            <h3 class="mb-3 fw-bold">There are no appointments in database</h3> <br />
        }
        <br /><br />
    </Authorized>
    <NotAuthorized>
        <h1>Access denied!</h1>
    </NotAuthorized>
</AuthorizeView>

@code {
    private static Doctor testDoctor = new Doctor() { Id = Guid.NewGuid().ToString(), PermissionNumber = 123, FirstName = "Zbigniew", LastName = "Nowak" };
    //testowa lista wizyt, docelowo bedzie zwracana z metody, ktora pobierze wizyty zalogowanego lekarza z bazy danych
    private List<Appointment> AppointmentsList = new List<Appointment>()
    {
        new Appointment() {Id=Guid.NewGuid(), Status=AppointmentStatus.BOOKED, RegisteredTo=new DateTime(2022, 12, 25, 10, 30, 00), Doctor=testDoctor,Patient=new Patient() {Id=Guid.NewGuid(), FirstName="Tomasz", LastName="Kowalska", Gender=Gender.MALE}, Registrar=new Registrar() {Id=Guid.NewGuid().ToString(), FirstName = "Magdalena", LastName = "Wojcik"}},
        new Appointment() {Id=Guid.NewGuid(), Status=AppointmentStatus.BOOKED, RegisteredTo=new DateTime(2022, 10, 12, 11, 45, 00), Doctor=testDoctor, Patient=new Patient() {Id=Guid.NewGuid(), FirstName="Kuba", LastName="Kaminski", Gender=Gender.MALE}, Registrar=new Registrar() {Id=Guid.NewGuid().ToString(), FirstName = "Magdalena2", LastName = "Wojcik2"}},
        new Appointment() {Id=Guid.NewGuid(), Status=AppointmentStatus.BOOKED, RegisteredTo=new DateTime(2022, 02, 20, 14, 00, 00), Doctor=testDoctor,Patient=new Patient() {Id=Guid.NewGuid(), FirstName="Ania", LastName="Kowalczyk", Gender=Gender.FEMALE}, Registrar=new Registrar() {Id=Guid.NewGuid().ToString(), FirstName = "Magdalena3", LastName = "Wojcik3"}},

    };

    public void NavigateToEditAppointment(string Id)
    {
        NavigationManager.NavigateTo($"EditAppointment/{Id}");
    }


    //TO DO
    //Wyszukiwanie listy pacjentów spełniających warunki wyszukiwania z zmiennej searchPatient
    public void SearchPatient()
    {

    }

    }

