@page "/EditAppointment/{Id}"
@using Clinic.Data
@using Clinic.Data.Enums
@using Clinic.Data.Models
@using System.Globalization
@using System.ComponentModel.DataAnnotations
@using System.Diagnostics

@inject NavigationManager NavigationManager;

<PageTitle>Edit appointment</PageTitle>



<AuthorizeView Roles="Doctor" Context="appointmentEditing">
    <Authorized>

        <EditForm EditContext="appointmentToEdit" OnValidSubmit="ChangeExistingAppointment" class="w-50 bg-gray px-4 py-3 rounded">

            <h1 class="mb-3 fw-bold">Edit appointment</h1><br />
            <h2 class="mb-3 fw-bold">Patient's informations:</h2>
            <label class="d-block mb-1 ml-1">Name and surname:</label>
            <label class="form-control w-75">@appointment.Patient.FirstName @appointment.Patient.LastName</label>
            <label class="d-block mb-1 ml-1">Date of birth:</label>
            <label class="form-control w-75">@appointment.Patient.BirthDate.Value.Day/@appointment.Patient.BirthDate.Value.Month/@appointment.Patient.BirthDate.Value.Year</label><br />
            <button type="button" class="btn btn-primary" @onclick="(() => NavigateToPatientExaminationHistory(appointment.Patient.Id.ToString()))">Show examinations and appointments history</button> <br /><br />

            <h3 class="mb-3 fw-bold">Appointment:</h3>
            <label class="d-block mb-1 ml-1" />Id:
            <label class="form-control w-75">@appointment.Id</label>

            <label class="d-block mb-1 ml-1" />Date:
            <label class="form-control w-75">@appointment.RegisteredTo.Day/@appointment.RegisteredTo.Month/@appointment.RegisteredTo.Year</label><br />


            <label class="d-block mb-1 ml-1" />Diagnosis:
            <InputText @bind-Value="appointment.Diagnosis" class="form-control w-75" />

            <label class="d-block mb-1 ml-1" />Description:
            <InputTextArea @bind-Value="appointment.Description" class="form-control w-75" />

            <label class="d-block mb-1 ml-1" /> Status:
            <InputRadioGroup @bind-Value="@appointment.Status">
                @foreach (var s in (AppointmentStatus[])Enum.GetValues(typeof(AppointmentStatus)))
                {

                    if (s != AppointmentStatus.CANCELLED)
                    {
                        if (s == appointment.Status)
                        {
                            <div><InputRadio Value="s" checked />@s.ToString().ToLower()</div>
                        }

                        else
                        {
                            <div><InputRadio Value="s" />@s.ToString().ToLower()</div>
                        }
                    }
                }
            </InputRadioGroup>
            <br />
            <button type="submit" class="btn btn-primary">Save</button><br /><br />

        </EditForm>

       <h3 class="mb-3 fw-bold">Laboratory examinations:</h3>
        @if (LaboratoryExaminationsList != null)
        {
            <TableTemplate Items="LaboratoryExaminationsList">
                <TableHeader>
                    <th> Examination's id </th>
                    <th> Code </th>
                    <th> Name </th>
                    <th> Order Date </th>
                    <th> Status </th>
                    <th> Doctor's note </th>
                    <th> Action </th>
                </TableHeader>
                <RowTemplate Context="examination">
                    <td> @examination.Id </td>
                    <td> @examination.GlossaryDictionary.Code.ToString().ToLower() </td>
                    <td> @examination.GlossaryDictionary.Name </td>
                    <td> @examination.OrderedAt </td>
                    <td> @examination.Status.ToString().ToLower() </td>
                    <td> @examination.DoctorsNotes </td>
                    <th>
                        <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => NavigateToEditLaboratoryExamination(examination.Id.ToString()))">Edit</a>
                    </th>
                </RowTemplate>
            </TableTemplate>
        }
        else
        {
            <h3 class="mb-3 fw-bold">There are no laboratory examinations in the base</h3> <br />
        }
        <button type="button" class="btn btn-primary" @onclick="(() => NavigateToOrderLaboratoryExamination(appointment.Id.ToString()))">Order laboratory examination</button> <br /><br />


        <h3 class="mb-3 fw-bold">Physical examinations:</h3>
        @if (PhysicalExaminationsList != null)
        {
            <TableTemplate Items="PhysicalExaminationsList">
                <TableHeader>
                    <th> Examination's id </th>
                    <th> Code </th>
                    <th> Name </th>
                    <th> Result </th>
                    <th> Action </th>
                </TableHeader>
                <RowTemplate Context="examination">
                    <td> @examination.Id </td>
                    <td> @examination.GlossaryDictionary.Code.ToString().ToLower() </td>
                    <td> @examination.GlossaryDictionary.Name </td>
                    <td> @examination.Result </td>
                    <th>
                        <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => NavigateToEditPhysicalExamination(examination.Id.ToString()))">Edit</a>
                    </th>
                </RowTemplate>
            </TableTemplate>
        }
        else
        {
            <h3 class="mb-3 fw-bold">There are no physical examinations in the base</h3> <br />
        }


        <button type="button" class="btn btn-primary" @onclick="(() => NavigateToAddPhysicalExamination(appointment.Id.ToString()))">Add physical examination</button> <br /><br />



    </Authorized>
    <NotAuthorized>
        <h1>Access denied!</h1>
    </NotAuthorized>
</AuthorizeView>

@code {

    //id wizyty, ktore zostalo przekazane z poprzedniego widoku, trzeba na jego podstawie zwrocic z bazy danych wizyte do edytowania
    [Parameter]
    public string Id { get; set; }

    //lista badan laboratoryjnych, które mają w sobie id aktualnej wizyty, maja byc zwrocone z bazy
    private List<LaboratoryExamination> PhysicalExaminationsList = new List<LaboratoryExamination>()
    {
        new LaboratoryExamination() {Id=Guid.NewGuid(), Result="wynik1", Appointment=appointment, GlossaryDictionary=new GlossaryDictionary() {Code=GlossaryCode.LAB_BLOOD, Name="jakaś tam 1", Type=GlossaryType.PHYSICAL}},
        new LaboratoryExamination() {Id=Guid.NewGuid(), Result="wynik2", Appointment=appointment, GlossaryDictionary=new GlossaryDictionary() {Code=GlossaryCode.LAB_COVID, Name="jakaś tam 2", Type=GlossaryType.PHYSICAL}},
        new LaboratoryExamination() {Id=Guid.NewGuid(), Result="wynik3", Appointment=appointment, GlossaryDictionary=new GlossaryDictionary() {Code=GlossaryCode.LAB_URINE, Name="jakaś tam 3", Type=GlossaryType.PHYSICAL}},
        new LaboratoryExamination() {Id=Guid.NewGuid(), Result="wynik4", Appointment=appointment, GlossaryDictionary=new GlossaryDictionary() {Code=GlossaryCode.LAB_BLOOD, Name="jakaś tam 4", Type=GlossaryType.PHYSICAL}}
    };

    //lista badan fizykalnych, które mają w sobie id aktualnej wizyty, maja byc zwrocone z bazy
    private List<LaboratoryExamination> LaboratoryExaminationsList = new List<LaboratoryExamination>()
    {
        new LaboratoryExamination() {Id=Guid.NewGuid(), DoctorsNotes="coś tam 1", OrderedAt=new DateTime(), Appointment=appointment, GlossaryDictionary=new GlossaryDictionary() {Code=GlossaryCode.PHY_EAR, Name="jakaś tam 1", Type=GlossaryType.LABORATORY}},
        new LaboratoryExamination() {Id=Guid.NewGuid(), DoctorsNotes="coś tam 2", OrderedAt=new DateTime(), Appointment=appointment, GlossaryDictionary=new GlossaryDictionary() {Code=GlossaryCode.PHY_THROAT, Name="jakaś tam 2", Type=GlossaryType.LABORATORY}},
        new LaboratoryExamination() {Id=Guid.NewGuid(), DoctorsNotes="coś tam 3", OrderedAt=new DateTime(), Appointment=appointment, GlossaryDictionary=new GlossaryDictionary() {Code=GlossaryCode.PHY_USG, Name="jakaś tam 3", Type=GlossaryType.LABORATORY}},
        new LaboratoryExamination() {Id=Guid.NewGuid(), DoctorsNotes="coś tam 4", OrderedAt=new DateTime(), Appointment=appointment, GlossaryDictionary=new GlossaryDictionary() {Code=GlossaryCode.PHY_EAR, Name="jakaś tam 4", Type=GlossaryType.LABORATORY}}
    };


    protected override void OnInitialized()
    {
        appointmentToEdit = new EditContext(appointment);
        base.OnInitialized();
    }

    private static Appointment appointment = new();
    EditContext appointmentToEdit;


    //TO DO
    //Przypisanie wartości do badania
    protected override async Task OnInitializedAsync()
    {
        //Poniższy kod testowo (do usunięcia potem)
        appointment = new Appointment() { Id = Guid.NewGuid(), Status = AppointmentStatus.BOOKED, RegisteredTo = new DateTime(2022, 12, 25, 10, 30, 00), Doctor = new Doctor() { Id = Guid.NewGuid().ToString(), PermissionNumber = 123, FirstName = "Zbigniew", LastName = "Nowak" }, Patient = new Patient() { Id = Guid.NewGuid(), FirstName = "Tomasz", LastName = "Kowalska", Gender = Gender.MALE, BirthDate = new DateTime(2000, 02, 13) }, Registrar = new Registrar() { Id = Guid.NewGuid().ToString(), FirstName = "Magdalena", LastName = "Wojcik" } };
   
    }

    //TO DO
    //Zapisanie danych do bazy
    private void ChangeExistingAppointment()
    {

        Debug.WriteLine($"Data - doctor last name: {appointment.Description}, patient last name: {appointment.Diagnosis}, date: {appointment.RegisteredTo}, date2: {appointment.Patient.FirstName}.");

    }

    public void NavigateToPatientExaminationHistory(string PatientId)
    {
        NavigationManager.NavigateTo($"ExaminationsAndAppointmentsHistory/{PatientId}");
    }

    public void NavigateToOrderLaboratoryExamination(string AppointmentId)
    {
        NavigationManager.NavigateTo($"OrderLaboratoryExamination/{AppointmentId}");
    }

    public void NavigateToAddPhysicalExamination(string AppointmentId)
    {
        NavigationManager.NavigateTo($"AddPhysicalExamination/{AppointmentId}");
    }

    public void NavigateToEditLaboratoryExamination(string LaboratoryExaminationId)
    {
        NavigationManager.NavigateTo($"EditLaboratoryExamination/{LaboratoryExaminationId}");
    }

    public void NavigateToEditPhysicalExamination(string PhysicalExaminationId)
    {
        NavigationManager.NavigateTo($"EditPhysicalExamination/{PhysicalExaminationId}");
    }

}
