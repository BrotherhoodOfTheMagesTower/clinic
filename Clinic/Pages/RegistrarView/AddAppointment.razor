@page "/AddAppointment"
@using Clinic.Data
@using Clinic.Data.Enums
@using Clinic.Data.Models
@using Clinic.Services
@inject NavigationManager NavigationManager;
@inject PatientService patientService
@inject DoctorService doctorService
@inject AppointmentService appointmentService
@inject RegistrarService registrarService
@inject IToastService toastService
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor


<PageTitle>Add Appointment</PageTitle>

<AuthorizeView Roles="Registrar" Context="appointmentAdding">
	<Authorized>
		<section>
			<h2 class="mb-3 fw-bold">Add a new appointment </h2>

			<br />


			<EditForm EditContext="newAppointment" OnValidSubmit="addAppointment" class="w-50 bg-gray px-4 py-3 rounded">
				<label class="d-block mb-1 ml-1">Doctor:</label>
				<InputSelect @bind-Value="doctorId"  class="form-control w-75">
					<option value="" selected disabled hidden>Choose here...</option>
					@foreach (var Doctor in AllDoctors)
					{
						<option value=@Doctor.Id>@Doctor.LastName @Doctor.FirstName</option>
					}
				</InputSelect><br />

				<label class="d-block mb-1 ml-1">Patient:</label>
				<InputSelect @bind-Value="patientId" class="form-control w-75">
					<option value="Guid.Empty" selected disabled hidden>Choose here...</option>
					@foreach (var Patient in AllPatients)
					{
						<option value=@Patient.Id.ToString()>@Patient.LastName @Patient.FirstName </option>
					}
				</InputSelect><br />


				<label class="d-block mb-1 ml-1">Date:</label>

				<InputDate @bind-Value="_appointmentDate" class="form-control w-75"> </InputDate><br />

				@if (doctorId!= null && appointmentDate!= null)
				{
					<label class="d-block mb-1 ml-1">Free hours:</label>
				<InputSelect @bind-Value="@appointmentTime" class="form-control w-75">
					@foreach (var time in @listAppointmentTime)
					{
						<option value=@time.TimeOfDay>@time.TimeOfDay </option>
					}
				</InputSelect><br />
				}
				else
				{
					<label class="d-block mb-1 ml-1">You have to choose a day and doctor first</label>
				}
				<br /><br />
				<div><button type="submit" class="btn btn-primary">Save</button></div>
			</EditForm>
		</section>
	</Authorized>
	<NotAuthorized>
		<section>
			<h1>Access denied!</h1>
		</section>
	</NotAuthorized>
</AuthorizeView>


@code {
	[Parameter]
	public string editAppointmentId { get; set; }
	private bool wasAppointmentAddedToDatabase { get; set; }

	private List<Doctor>? AllDoctors;
	private List<Patient>? AllPatients;
	private List<DateTime>? listAppointmentTime;
	private DateTime appointmentDate;
	public DateTime _appointmentDate
	{
		get { 
			listAppointmentTime= appointmentService.GetAvailableHours(appointmentDate, doctorId);
			return appointmentDate; 
		}
		set
		{
			appointmentDate = value;
			listAppointmentTime= appointmentService.GetAvailableHours(appointmentDate, doctorId);
		}
	}
	private string appointmentTime;
	private string doctorId;
	private string patientId;

	Appointment appointment = new();
	EditContext newAppointment;

	protected override async Task OnInitializedAsync()
	{
		newAppointment = new EditContext(appointment);
		//default data and time
		appointmentDate = DateTime.Today;
		base.OnInitialized();
		AllDoctors = doctorService.GetAllDoctors();
		AllPatients = patientService.GetAllPatients();
		listAppointmentTime= appointmentService.GetAvailableHours(appointmentDate, doctorId);
	}

	private void addAppointment()
	{
		Registrar loggedRegistrar = registrarService.GetRegistrarByEmail(httpContextAccessor.HttpContext.User.Identity.Name);
		appointment.Registrar = loggedRegistrar;
		System.DateTime validatedDateTime = appointmentDate.Add(TimeSpan.Parse(appointmentTime));
		appointment.RegisteredTo = validatedDateTime;
		assignPatientsAndDoctorsToAppointmentById();
		wasAppointmentAddedToDatabase = appointmentService.Add(appointment);
		if (wasAppointmentAddedToDatabase){
			toastService.ShowSuccess($"Appointment was added to the database.", "Well done!");
			NavigationManager.NavigateTo($"Appointments");
		}
		else
			toastService.ShowError("Sorry! Doctor {appointment.Doctor.FirstName} {appointment.Doctor.LastName} already has appointment a this time.", "Oops!");
	}

	private void assignPatientsAndDoctorsToAppointmentById()
	{
		if (patientId != null)
			appointment.Patient = patientService.GetById(Guid.Parse(patientId));
		if (doctorId != null)
			appointment.Doctor = doctorService.GetById(doctorId);
	}

	private void NavigateToAppointments()
	{
		NavigationManager.NavigateTo($"Appointments");
	}

}