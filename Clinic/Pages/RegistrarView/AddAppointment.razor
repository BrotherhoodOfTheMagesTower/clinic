@page "/AddAppointment/{EditAppointmentId}"
@using Clinic.Data
@using Clinic.Data.Enums
@using Clinic.Data.Models

@inject NavigationManager NavigationManager;

@if (EditAppointmentId.Equals("-1"))
{
    <PageTitle>Add Appointment</PageTitle>
}else
{
    <PageTitle>Edit Appointment</PageTitle>
}

<AuthorizeView Roles="Registrar" Context="appointmentAdding">
    <Authorized>
        
            @if (EditAppointmentId.Equals("-1"))
            {
                <h2 class="mb-3 fw-bold">Add a new appointment </h2><br />
            }else
            {
                <h2 class="mb-3 fw-bold">Edit a appointment </h2><br />
            }

        <EditForm EditContext="newAppointment" OnValidSubmit="addAppointment" class="w-50 bg-gray px-4 py-3 rounded">
            <label class="d-block mb-1 ml-1">Doctor:</label>
            <InputSelect @bind-Value="doctorId" class="form-control w-75">
                @if (EditAppointmentId.Equals("-1"))
                {
                    <option value="" selected disabled hidden>Choose here...</option>
                }
                @foreach (var Doctor in AllDoctors)
                {
                    if (Doctor.Id.ToString().Equals(EditAppointmentId))
                    {
                        <option value=@Doctor.Id selected>@Doctor.LastName @Doctor.FirstName</option>
                    }
                    else
                    {
                        <option value=@Doctor.Id>@Doctor.LastName @Doctor.FirstName</option>
                    }
                }
            </InputSelect><br />

            <label class="d-block mb-1 ml-1">Patient:</label>
            <InputSelect @bind-Value="patientId" class="form-control w-75">
                @if (EditAppointmentId.Equals("-1"))
                {
                    <option value="Guid.Empty" selected disabled hidden>Choose here...</option>
                }
                @foreach (var Patient in AllPatients)
                {
                    if (Patient.Id.ToString().Equals(EditAppointmentId))
                    {
                        <option value=@Patient.Id.ToString() selected>@Patient.LastName @Patient.FirstName </option>
                    }
                    else
                    {
                        <option value=@Patient.Id.ToString()>@Patient.LastName @Patient.FirstName </option>
                    }
                }
            </InputSelect><br />


            <label class="d-block mb-1 ml-1">Date:</label>

            <InputDate @bind-Value="@appointmentDate" class="form-control w-75"> </InputDate><br />

            <label class="d-block mb-1 ml-1">Time:</label>
            <InputText type="time" @bind-Value="@appointmentTime" step=30 class="form-control w-75"></InputText><br />

            @if (!EditAppointmentId.Equals("-1"))
            {
                <InputRadioGroup @bind-Value="@appointment.Status">
               @foreach (var g in (AppointmentStatus[])Enum.GetValues(typeof(AppointmentStatus)))
                {
                   if (g == appointment.Status)
                    {
                      <div><InputRadio Value="g" checked/>@g.ToString().ToLower()</div>  
                    }
                    else
                    {
                     <div><InputRadio Value="g" />@g.ToString().ToLower()</div>   
                    }
                }
            </InputRadioGroup>
            }
            <br /><br />

            <div><button type="submit" class="btn btn-primary">Save</button></div>

        </EditForm>
        <button type="submit" class="btn btn-primary" @onclick="() => NavigateToAppointments()">Back</button>
    </Authorized>
    <NotAuthorized>
        <h1>Access denied!</h1>
    </NotAuthorized>
</AuthorizeView>


@code {
    [Parameter]
    public string EditAppointmentId { get; set; }

    Appointment appointment = new();
    EditContext newAppointment;

    protected override async Task OnInitializedAsync()
    {
        newAppointment = new EditContext(appointment);
        //default data and time
        appointmentDate=DateTime.Today;
        appointmentTime = "15:00:00";
        base.OnInitialized();
        if (!EditAppointmentId.Equals("-1"))
        {
            //Poniższy kod testowo (do usunięcia potem)
            appointmentDate = new DateTime(2022, 05, 03);
            appointmentTime = "13:30:00";
        }
    }

    private string appointmentTime;
    private DateTime appointmentDate;
    private string doctorId;
    private string patientId;

    //testowo utworzone obiekty klas, docelowo do lisy wczytane będzie to co zwróci funkcja getAllDoctors i getAllPatients
    //static ApplicationUser user1 = new ApplicationUser() { FirstName = "Zbigniew", LastName = "Nowak" };
    //static ApplicationUser user2 = new ApplicationUser() { FirstName = "Andrzej", LastName = "Maćkowski" };

    private List<Doctor> AllDoctors = new List<Doctor>()
    {
        new Doctor() {Id="id", PermissionNumber=123, FirstName = "Zbigniew", LastName = "Nowak"},
        new Doctor() {Id="id2", PermissionNumber=345, FirstName = "Andrzej", LastName = "Maćkowski" }
    };

    private List<Patient> AllPatients = new List<Patient>()
    {
        new Patient() {Id=Guid.NewGuid(), FirstName="Adam", LastName="Nowak", Gender=Gender.MALE},
        new Patient() {Id=Guid.NewGuid(), FirstName="Marcin", LastName="Kowalski", Gender=Gender.MALE},
        new Patient() {Id=Guid.NewGuid(), FirstName="Daniel", LastName="Anczyk", Gender=Gender.MALE},
        new Patient() {Id=Guid.NewGuid(), FirstName="Dawid", LastName="Nowakowski", Gender=Gender.MALE}
    };

    private void addAppointment() //to do
    {
        //testowe zapisywanie obiektu klasy Doctor i Patient do appointment po id
        assignPatientsAndDoctorsToAppointmentById();

        System.DateTime validatedDateTime = appointmentDate.Add(TimeSpan.Parse(appointmentTime));
        appointment.RegisteredTo = validatedDateTime;

        //wypisywanie danych w konsoli
        Console.WriteLine($"Data - doctor last name: {appointment.Doctor.LastName}, patient last name: {appointment.Patient.LastName}, date: {appointment.RegisteredTo}.");

    }

    private void getAllDoctors()
    { //to do

    }

    private void getAllPatients()
    { //to do

    }

    private void assignPatientsAndDoctorsToAppointmentById()
    {
        foreach (var Patient in AllPatients) 
        {
            if (Patient.Id.Equals(Guid.Parse(patientId)))
                appointment.Patient = Patient;
        }

        foreach (var Doctor in AllDoctors)
        {
            if (Doctor.Id.Equals(doctorId))
                appointment.Doctor = Doctor;
        }
    }

    private void NavigateToAppointments()
    {
        NavigationManager.NavigateTo($"Appointments");
    }
}