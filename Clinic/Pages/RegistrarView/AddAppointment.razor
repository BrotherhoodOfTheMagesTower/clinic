@page "/AddAppointment/{EditAppointmentId}"
@using Clinic.Data
@using Clinic.Data.Enums
@using Clinic.Data.Models
@using Clinic.Services
@inject NavigationManager NavigationManager;
@inject PatientService patientService
@inject DoctorService doctorService
@inject AppointmentService appointmentService
@inject RegistrarService registrarService
@inject IToastService toastService
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor

@if (editAppointmentId.Equals("-1"))
{
    <PageTitle>Add Appointment</PageTitle>
}
else
{
    <PageTitle>Edit Appointment</PageTitle>
}

<AuthorizeView Roles="Registrar" Context="appointmentAdding">
    <Authorized>
        <section>
        @if (editAppointmentId.Equals("-1"))
        {
            <h2 class="mb-3 fw-bold">Add a new appointment </h2>

            <br />
        }
        else
        {
            <h2 class="mb-3 fw-bold">Edit a appointment </h2>

            <br />
        }

        <EditForm EditContext="newAppointment" OnValidSubmit="addAppointment" class="w-50 bg-gray px-4 py-3 rounded">
            <label class="d-block mb-1 ml-1">Doctor:</label>
            <InputSelect @bind-Value="doctorId" class="form-control w-75">
                @if (editAppointmentId.Equals("-1"))
                {
                    <option value="" selected disabled hidden>Choose here...</option>
                    @foreach (var Doctor in AllDoctors)
                    {
                        <option value=@Doctor.Id>@Doctor.LastName @Doctor.FirstName</option>
                    }
                }
                else
                {
                    @foreach (var Doctor in AllDoctors)
                    {
                        if (Doctor.Id.Equals(appointment.Doctor.Id))
                        {
                            <option value=@Doctor.Id selected>@Doctor.LastName @Doctor.FirstName</option>
                        }
                        else
                        {
                            <option value=@Doctor.Id>@Doctor.LastName @Doctor.FirstName</option>
                        }
                    }
                }
            </InputSelect><br />

            <label class="d-block mb-1 ml-1">Patient:</label>
            <InputSelect @bind-Value="patientId" class="form-control w-75">
                @if (editAppointmentId.Equals("-1"))
                {
                    <option value="Guid.Empty" selected disabled hidden>Choose here...</option>
                    @foreach (var Patient in AllPatients)
                    {
                        <option value=@Patient.Id.ToString()>@Patient.LastName @Patient.FirstName </option>
                    }
                }
                else
                {
                    @foreach (var Patient in AllPatients)
                    {
                        if (Patient.Id.ToString().Equals(appointment.Patient.Id.ToString()))
                        {
                            <option value=@Patient.Id.ToString() selected>@Patient.LastName @Patient.FirstName </option>
                        }
                        else
                        {
                            <option value=@Patient.Id.ToString()>@Patient.LastName @Patient.FirstName </option>
                        }
                    }
                }
            </InputSelect><br />


            <label class="d-block mb-1 ml-1">Date:</label>

            <InputDate @bind-Value="@appointmentDate" class="form-control w-75"> </InputDate><br />

            <label class="d-block mb-1 ml-1">Time:</label>
            <InputText type="time" @bind-Value="@appointmentTime" step=30 class="form-control w-75"></InputText><br />

            @if (!editAppointmentId.Equals("-1"))
            {
                <InputRadioGroup @bind-Value="@appointment.Status">
                    @foreach (var g in (AppointmentStatus[])Enum.GetValues(typeof(AppointmentStatus)))
                    {
                        if (g == appointment.Status)
                        {
                        <div><InputRadio Value="g" checked />@g.ToString().ToLower()</div>
                        }
                        else
                        {
                        <div><InputRadio Value="g" />@g.ToString().ToLower()</div>
                        }
                    }
            </InputRadioGroup>
            }
            <br /><br />
            <div><button type="submit" class="btn btn-primary">Save</button></div>
        </EditForm>
        <button type="submit" class="btn btn-primary" @onclick="() => NavigateToAppointments()">Back</button>
        </section>
    </Authorized>
    <NotAuthorized>
        <section>
        <h1>Access denied!</h1>
        </section>
    </NotAuthorized>
</AuthorizeView>


@code {
    [Parameter]
    public string editAppointmentId { get; set; }
    private bool wasAppointmentAddedToDatabase { get; set; }

    private List<Doctor>? AllDoctors;
    private List<Patient>? AllPatients;
    private string appointmentTime;
    private DateTime appointmentDate;
    private string doctorId;
    private string patientId;

    Appointment appointment = new();
    EditContext newAppointment;

    protected override async Task OnInitializedAsync()
    {
        newAppointment = new EditContext(appointment);
        //default data and time
        appointmentDate = DateTime.Today;
        appointmentTime = "15:00:00";
        base.OnInitialized();
        if (!editAppointmentId.Equals("-1"))
        {
            appointment = appointmentService.GetById(Guid.Parse(editAppointmentId));
            appointmentDate = appointment.RegisteredTo;
            appointmentTime = appointment.RegisteredTo.ToString("HH:mm:ss");
        }
        AllDoctors = doctorService.GetAllDoctors();
        AllPatients = patientService.GetAllPatients();
    }

    private void addAppointment()
    {
        Registrar loggedRegistrar = registrarService.GetRegistrarByEmail(httpContextAccessor.HttpContext.User.Identity.Name);
        appointment.Registrar = loggedRegistrar;
        System.DateTime validatedDateTime = appointmentDate.Add(TimeSpan.Parse(appointmentTime));
        appointment.RegisteredTo = validatedDateTime;
        if (editAppointmentId.Equals("-1"))
        {
            assignPatientsAndDoctorsToAppointmentById();
            wasAppointmentAddedToDatabase = appointmentService.Add(appointment);
            if (wasAppointmentAddedToDatabase)
                toastService.ShowSuccess($"Appointment was added to the database.", "Well done!");
            else
                toastService.ShowError("Sorry! Doctor {appointment.Doctor.FirstName} {appointment.Doctor.LastName} already has appointment a this time.", "Oops!");
        }
        else
        {
            assignPatientsAndDoctorsToAppointmentById();
            appointmentService.Update(appointment);
            toastService.ShowSuccess($"Appointment was updated.", "Well done!");
            
        }
    }

    private void assignPatientsAndDoctorsToAppointmentById()
    {
        if(patientId != null)
            appointment.Patient = patientService.GetById(Guid.Parse(patientId));
        if(doctorId != null)
            appointment.Doctor = doctorService.GetById(doctorId);
    }

    private void NavigateToAppointments()
    {
        NavigationManager.NavigateTo($"Appointments");
    }
}