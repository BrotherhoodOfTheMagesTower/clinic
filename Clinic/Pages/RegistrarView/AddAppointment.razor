@page "/AddNewAppointment"
@using Clinic.Data
@using Clinic.Data.Models

<PageTitle>Add Appointment</PageTitle>

<AuthorizeView Roles="Registrar" Context="appointmentAdding">
    <Authorized>
        <h2>Add a new appointment </h2><br />

        <EditForm EditContext="newAppointment" OnValidSubmit="addAppointment" class="w-50 bg-gray px-4 py-3 rounded">
            

                <h3>Select a doctor</h3>

                <InputSelect @bind-Value="appointment.DoctorId" class="form-control w-75">
                    @foreach (var Doctor in AllDoctors)
                    {
                        <option value=@Doctor.Id>@Doctor.User.FirstName @Doctor.User.LastName</option>
                    }
                </InputSelect><br />

                <h3>Select a patient</h3>

                <InputSelect @bind-Value="appointment.PatientId" class="form-control w-75">
                    @foreach (var Patient in AllPatients)
                    {
                        <option value=@Patient.PatientId>@Patient.FirstName @Patient.LastName</option>
                    }
                </InputSelect><br />

                <h3>Enter the appointment's date</h3>

                <InputDate @bind-Value="appointmentDate"> </InputDate><br />
                <InputText type="time" @bind-Value="appointmentTime"> </InputText><br />

                <div><button type="submit" class="btn btn-primary">Add appointment</button></div>

        </EditForm>

    </Authorized>
    <NotAuthorized>
        <h1>Access denied!</h1>
    </NotAuthorized>
</AuthorizeView>


@code {
    protected override void OnInitialized()
    {
        newAppointment = new EditContext(appointment);

        base.OnInitialized();
    }
    readonly Appointment appointment = new();
    EditContext newAppointment;

    private string appointmentTime;
    private DateTime appointmentDate;

    //testowo utworzone obiekty klas, docelowo do lisy wczytane będzie to co zwróci funkcja getAllDoctors i getAllPatients
    static ApplicationUser user1 = new ApplicationUser() { FirstName = "Zbigniew", LastName = "Konieczny" };
    static ApplicationUser user2 = new ApplicationUser() { FirstName = "Andrzej", LastName = "Maćkowski" };

    private List<Doctor> AllDoctors = new List<Doctor>()
    {
        new Doctor() {Id="id", PermissionNumber=123, User=user1},
        new Doctor() {Id="id2", PermissionNumber=345, User=user2}
    };

    private List<Patient> AllPatients = new List<Patient>()
    {
        new Patient() {PatientId=Guid.NewGuid(), FirstName="Adam", LastName="Nowak", Gender=Gender.Male},
        new Patient() {PatientId=Guid.NewGuid(), FirstName="Marcin", LastName="Kowalski", Gender=Gender.Male}
    };

    private void addAppointment() //to do
    {
        //testowe zapisywanie obiektu klasy Doctor i Patient do appointment po id
        foreach (var Patient in AllPatients)
        {
            if (Patient.PatientId.Equals(appointment.PatientId))
                appointment.Patient = Patient;
        }

        foreach (var Doctor in AllDoctors)
        {
            if (Doctor.Id.Equals(appointment.DoctorId))
                appointment.Doctor = Doctor;
        }

        System.DateTime validatedDateTime = appointmentDate.Add(TimeSpan.Parse(appointmentTime));
        appointment.AppointmentDate = validatedDateTime;

        //wypisywanie danych w konsoli
        Console.WriteLine($"Data - doctor last name: {appointment.Doctor.User.LastName}, patient last name: {appointment.Patient.LastName}, date: {appointment.AppointmentDate}.");

    }

    private void getAllDoctors()
    { //to do

    }

    private void getAllPatients()
    { //to do

    }


}
