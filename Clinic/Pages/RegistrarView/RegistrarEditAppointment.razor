@page "/RegistrarEditAppointment/{EditAppointmentId}"
@using Clinic.Data
@using Clinic.Data.Enums
@using Clinic.Data.Models
@using Clinic.Services
@inject NavigationManager NavigationManager;
@inject PatientService patientService
@inject DoctorService doctorService
@inject AppointmentService appointmentService
@inject RegistrarService registrarService
@inject IToastService toastService
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor


<PageTitle>Edit Appointment</PageTitle>

<AuthorizeView Roles="Registrar" Context="appointmentAdding">
	<Authorized>
		<section>

			<h2 class="mb-3 fw-bold">Edit a appointment </h2>

			<br />

			<EditForm EditContext="editAppointmentt" OnValidSubmit="editAppointment" class="w-50 bg-gray px-4 py-3 rounded">
				<label class="d-block mb-1 ml-1">Patient:</label>
				<InputText @bind-Value="patientName" class="form-control w-75" readonly="readonly"></InputText><br />

				<label class="d-block mb-1 ml-1">Doctor:</label>
				<InputSelect @bind-Value="doctorId" class="form-control w-75">
					@foreach (var Doctor in AllDoctors)
					{
						if (Doctor.Id.Equals(appointment.Doctor.Id))
						{
							<option value=@Doctor.Id selected>@Doctor.LastName @Doctor.FirstName</option>
						}
						else
						{
							<option value=@Doctor.Id>@Doctor.LastName @Doctor.FirstName</option>
						}
					}
				</InputSelect><br />

				<InputDate @bind-Value="@_appointmentDate" class="form-control w-75"> </InputDate><br />
				<label class="d-block mb-1 ml-1">Choose hour: @appointment.RegisteredTo.TimeOfDay</label>
				<label class="d-block mb-1 ml-1">Another free hours in this day:</label>
				<InputSelect @bind-Value="@appointmentTime" class="form-control w-75">
					@foreach (var time in @listAppointmentTime)
					{
						<option value=@time>@time.TimeOfDay </option>
					}
				</InputSelect><br />

				<br /><br />
				<div><button type="submit" class="btn btn-primary">Save</button></div>
			</EditForm>
		</section>
	</Authorized>
	<NotAuthorized>
		<section>
			<h1>Access denied!</h1>
		</section>
	</NotAuthorized>
</AuthorizeView>


@code {
	[Parameter]
	public string editAppointmentId { get; set; }
	private bool wasAppointmentAddedToDatabase { get; set; }

	private List<Doctor>? AllDoctors;
	private List<Patient>? AllPatients;
	private List<DateTime>? listAppointmentTime;
	private string appointmentTime;
	private string patientName;
	private DateTime appointmentDate;
	public DateTime _appointmentDate
	{
		get { 
			listAppointmentTime= appointmentService.GetAvailableHours(appointmentDate, doctorId);
			return appointmentDate; 
		}
		set
		{
			appointmentDate = value;
			listAppointmentTime= appointmentService.GetAvailableHours(appointmentDate, doctorId);
		}
	}
	private string doctorId;
	private string patientId;

	Appointment appointment = new();
	EditContext editAppointmentt;

	protected override async Task OnInitializedAsync()
	{
		editAppointmentt = new EditContext(appointment);
		base.OnInitialized();
		appointment = appointmentService.GetById(Guid.Parse(editAppointmentId));
		patientName = appointment.Patient.FirstName +" "+ appointment.Patient.LastName;
		doctorId = appointment.Doctor.Id;
		appointmentDate = appointment.RegisteredTo;
		appointmentTime = appointment.RegisteredTo.ToString("HH:mm:ss");
		AllDoctors = doctorService.GetAllDoctors();
		AllPatients = patientService.GetAllPatients();
		listAppointmentTime= appointmentService.GetAvailableHours(appointmentDate, doctorId);
	}

	private void editAppointment()
	{
		Registrar loggedRegistrar = registrarService.GetRegistrarByEmail(httpContextAccessor.HttpContext.User.Identity.Name);
		appointment.Registrar = loggedRegistrar;
		System.DateTime validatedDateTime = DateTime.Parse(appointmentTime);
		appointment.RegisteredTo = validatedDateTime;
		assignPatientsAndDoctorsToAppointmentById();
		appointmentService.Update(appointment);
		toastService.ShowSuccess($"Appointment was updated.", "Well done!");
		NavigationManager.NavigateTo($"Appointments");
	}

	private void assignPatientsAndDoctorsToAppointmentById()
	{
		if (patientId != null)
			appointment.Patient = patientService.GetById(Guid.Parse(patientId));
		if (doctorId != null)
			appointment.Doctor = doctorService.GetById(doctorId);
	}

	private void NavigateToAppointments()
	{
		NavigationManager.NavigateTo($"Appointments");
	}

}