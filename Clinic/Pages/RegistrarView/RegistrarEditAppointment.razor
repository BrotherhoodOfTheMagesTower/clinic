@page "/RegistrarEditAppointment/{EditAppointmentId}"
@using Clinic.Data
@using Clinic.Data.Enums
@using Clinic.Data.Models
@using Clinic.Services
@inject NavigationManager NavigationManager;
@inject PatientService patientService
@inject DoctorService doctorService
@inject AppointmentService appointmentService
@inject RegistrarService registrarService
@inject IToastService toastService
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor


<PageTitle>Edit Appointment</PageTitle>

<AuthorizeView Roles="Registrar" Context="appointmentAdding">
    <Authorized>
        <section>
            @if (editAppointmentt is not null)
            {
                <h2 class="mb-3 fw-bold">Edit a appointment </h2>

                <br />
                <EditForm EditContext="editAppointmentt" OnValidSubmit="editAppointment" class="w-50 bg-gray px-4 py-3 rounded">
                    <label class="d-block mb-1 ml-1">Patient:</label>
                    <InputText @bind-Value="patientName" class="form-control w-75" readonly="readonly"></InputText><br />

                    <label class="d-block mb-1 ml-1">Doctor:</label>
                    <InputSelect @bind-Value="doctorId" class="form-control w-75">
                        @if (AllDoctors is not null && appointment is not null)
                        {
                        @foreach (var Doctor in AllDoctors)
                            {
                                if (Doctor.Id.Equals(appointment.Doctor.Id))
                                {
                                <option value=@Doctor.Id selected>@Doctor.LastName @Doctor.FirstName</option>
                                }
                                else
                                {
                                <option value=@Doctor.Id>@Doctor.LastName @Doctor.FirstName</option>
                                }
                            }
                        }
                </InputSelect><br />

                <InputDate @bind-Value="@_appointmentDate" class="form-control w-75"> </InputDate><br />
                @if (appointment is not null)
                    {
                        <label class="d-block mb-1 ml-1">Choose hour: @appointment.RegisteredTo.TimeOfDay</label>
                        <label class="d-block mb-1 ml-1">Another free hours in this day:</label>
                    }
                    <InputSelect @bind-Value="@appointmentTime" class="form-control w-75">
                        @if (listAppointmentTime is not null)
                        {
                        @foreach (var time in @listAppointmentTime)
                            {
                            <option value=@time>@time.TimeOfDay </option>
                            }
                        }
                </InputSelect><br />

                <br /><br />
                <div><button type="submit" class="btn btn-primary">Save</button></div>
            </EditForm>
            }
        </section>
    </Authorized>
    <NotAuthorized>
        <section>
            <h1>Access denied!</h1>
        </section>
    </NotAuthorized>
</AuthorizeView>


@code {
    [Parameter]
    public string editAppointmentId { get; set; } = String.Empty;
    private bool wasAppointmentAddedToDatabase { get; set; }

    private List<Doctor>? AllDoctors;
    private List<Patient>? AllPatients;
    private List<DateTime>? listAppointmentTime;
    private string appointmentTime = String.Empty;
    private string patientName = String.Empty;
    private DateTime appointmentDate;
    public DateTime _appointmentDate
    {
        get
        {
            listAppointmentTime = appointmentService.GetAvailableHours(appointmentDate, doctorId);
            return appointmentDate;
        }
        set
        {
            appointmentDate = value;
            listAppointmentTime = appointmentService.GetAvailableHours(appointmentDate, doctorId);
        }
    }
    private string doctorId = String.Empty;
    private string patientId = String.Empty;

    private Appointment? appointment;
    private EditContext? editAppointmentt;

    protected override void OnInitialized()
    {

        Guid parsedId;
        var validId = Guid.TryParse(editAppointmentId, out parsedId);
        if (validId)
        {
            var tempAppointment = appointmentService.GetById(parsedId);
            if (tempAppointment is not null)
            {
                appointment = tempAppointment;
                editAppointmentt = new EditContext(appointment);
                if (appointment.Patient is not null && appointment.Doctor is not null)
                {
                    patientName = appointment.Patient.FirstName + " " + appointment.Patient.LastName;
                    doctorId = appointment.Doctor.Id;
                    appointmentDate = appointment.RegisteredTo;
                    appointmentTime = appointment.RegisteredTo.ToString("HH:mm:ss");
                    AllDoctors = doctorService.GetAllDoctors();
                    AllPatients = patientService.GetAllPatients();
                    listAppointmentTime = appointmentService.GetAvailableHours(appointmentDate, doctorId);
                }

            }
        }
    }

    private void editAppointment()
    {
        var name = httpContextAccessor?.HttpContext?.User?.Identity?.Name;
        Registrar? loggedRegistrar;
        if (name is not null)
        {
            loggedRegistrar = registrarService.GetRegistrarByEmail(name);

            if (loggedRegistrar is not null && appointment is not null)
            {
                appointment.Registrar = loggedRegistrar;
                System.DateTime validatedDateTime = DateTime.Parse(appointmentTime);
                appointment.RegisteredTo = validatedDateTime;
                assignPatientsAndDoctorsToAppointmentById();
                appointmentService.Update(appointment);
                toastService.ShowSuccess($"Appointment was updated.", "Well done!");
                NavigationManager.NavigateTo($"Appointments");
            }
        }
    }

    private void assignPatientsAndDoctorsToAppointmentById()
    {
        Guid parsedId;
        var validId = Guid.TryParse(patientId, out parsedId);
        if (validId)
        {
            var tempPatient = patientService.GetById(parsedId);
            if (tempPatient is not null && appointment is not null)
            {
                appointment.Patient = tempPatient;
            }
        }
        Guid doctorParsedId;
        var doctorValidId = Guid.TryParse(patientId, out doctorParsedId);
        if (doctorValidId)
        {
            var tempDoctor = doctorService.GetById(doctorId);
            if (tempDoctor is not null && appointment is not null)
            {
                appointment.Doctor = tempDoctor;
            }
        }
    }

    private void NavigateToAppointments()
    {
        NavigationManager.NavigateTo($"Appointments");
    }

}