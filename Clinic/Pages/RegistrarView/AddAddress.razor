@page "/AddAddress/{EditPatientId}"
@using Clinic.Data.Enums
@using Clinic.Data.Models
@using Clinic.Data
@using Clinic.Services

@inject NavigationManager NavigationManager;
@inject PatientService patientService;
@inject AddressService addressService;
@inject IToastService toastService

@if (!hasAddress)
{
    <PageTitle>Add Patient's Address</PageTitle>
}
else
{
    <PageTitle>Edit Patient's Address</PageTitle>
}

<AuthorizeView Roles="Registrar" Context="addressAdding">
    <Authorized>

        @if (!hasAddress)
        {
            <h2 class="mb-3 fw-bold">Add patient's address</h2>  <br />
        }
        else
        {
            <h2 class="mb-3 fw-bold">Edit patient's address</h2>  <br />
        }

        <EditForm EditContext="newAddress" OnValidSubmit="addAddress" class="w-50 bg-gray px-4 py-3 rounded">

            <h3 class="mb-3 fw-bold">Enter the patient's:</h3>

            <label class="d-block mb-1 ml-1">city</label>
            <InputText @bind-Value="@address.City" class="form-control w-75" />

            <label class="d-block mb-1 ml-1">street </label>
            <InputText @bind-Value="@address.Street" class="form-control w-75" />

            <label class="d-block mb-1 ml-1">postal code</label>
            <InputText @bind-Value="@address.PostalCode" class="form-control w-75" />

            <label class="d-block mb-1 ml-1">house number</label>
            <InputText @bind-Value="@address.HouseNumber" class="form-control w-75" />

            <label class="d-block mb-1 ml-1">local number </label>
            <InputText @bind-Value="@address.LocalNumber" class="form-control w-75" />

            <br />
            <div>
                <button type="submit" class="btn btn-primary">Save</button>
            </div>
        </EditForm>
        <button type="submit" class="btn btn-primary" @onclick="() => NavigateToPatients()">Back</button>

    </Authorized>
    <NotAuthorized>
        <h1>Access denied!</h1>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public string EditPatientId { get; set; }

    private bool hasAddress;

    protected override async Task OnInitializedAsync()
    {
        newAddress = new EditContext(address);
        base.OnInitialized();
        patient = patientService.GetById(Guid.Parse(EditPatientId));
        if (patient.Address != null)
        {
            var addressId = patientService.GetPatientAddressId(patient.Id);
            address = addressService.GetById(addressId);
            hasAddress = true;
        }
    }
    private Address address = new();
    private Patient patient = new();
    EditContext newAddress;

    private void addAddress()
    {
        if (hasAddress)
        {
            addressService.Update(address);
            toastService.ShowSuccess($"Address was succesfully updated.", "Well done!");
        }
        else
        {
            addressService.Add(address);
            toastService.ShowSuccess($"Address was succesfully added to the database.", "Well done!");
        }
    }

    private void NavigateToPatients()
    {
        NavigationManager.NavigateTo($"AddPatient/{EditPatientId}");
    }
}